CSS SELECTORS: selectors are patterns used to select the element you want to style.

element: basic form of selector
p {
    font-size: 10px;
}

#example {
    font-size: 10px;
}

attribute: select elements with a specified attribute

a[href="www.google.com"] {
    background-color: #df009d;
}

pseudo: style specific parts of an element

p:before {
    font-size: 12px;
}

p:after {
    font-size: 18px;
}

p:link {
    color: red;
} (before link is visited, will be red)

p:visited {
    color: blue;
} (after link is visited, will be blue)


TYPOGRAPHY: scaling, family, size.

inserting web fonts (online)-->
- html: <link href= "|insert web-font link|" rel="stylesheet">
- css: @import url(|insert link|);

variable fonts: can pack a full family of styles into one true-type file
- change the style not the color
- font scaling, font-variation

edit variable font the following -->
.text {
    font-variation-settings: 'slnt' 5, 'ital' 5;
    font-optical-sizing: 'opsz' 10;
}

text clipping:
p {
    overflow: hidden;
    position: absolute;
}

2D rotation: add a perspective attribute then rotate it.
p {
    perspective: 200px;
    transform: rotate (90deg);
}

complex 2D: transform: skew the text, then make an additional box to rotate it.
p {
    transform: skew(-40deg);
    overflow: hidden;
    position: absolute;
}

#box {
    transform: rotate(90deg);
}

keyframe animations: using multiple keyframes to create an animation.
@keyframe {
    0% {
        opacity: 0%;
    }

    30% {
        opacity: 36%;
    }

    100% {
        opacity: 100%;
    }
}


CONTENT

list styles: specifies the type of list-item marker in a list.
ul {
    list-style-type: disc, square, circle; 
}

ol {
    list-style-position: inside; (default position is outside)
}

adv. list styles:
li {
    list-style-image: url();
}

pure css accordions: a menu or bar that opens up with usually an arrow or a plus sign (+-, < >).

.button {

}

input:checked + .tab-label {
    background: #000;
}

input:check + .tab-label {
    transform: rotate(90deg);
}

simple tables: 
table {
    width: 800px;
    box-shadow: -5px 5px 0px rgba(202,323,34);
}
GRAPHICS

background-repeat: can repeat an image horizontally and vertically
img {
    background-repeat: repeat-x; (or y)
}

background position: moves background position.
img {
    background-position: top left;
}

background-attachment: sets whether a background image's position is fixed or can be scrolled through.
img {
    background-attachment: scroll; (or fixed)
}

gradients: set 3 colors to make a gradient.
.colors {
    linear-gradient: (top, middle, bottom);
}

```or you can make it go from left-to-right```

.colors {
    linear-gradient: (circle to left, red, blue, green);
}

``` or a circle ```

multiple bgs: multiple layers of bg imgs.
.bg {
    width: 100%;
    height: 400px;
    background-image: url(firefox.png), url(bubbles.png),
    linear-gradient(to right, rgb(30 75 115 / 100%), rgb(255 255 255 / 0%));
    background-repeat: no-repeat, no-repeat, no-repeat;
    background-position:
    bottom right,
    left,
    right;
}

adv. border: border styles

.border {
    border-style: groove;
    border-color: red blue yellow purple;
    border-img: url();
}

img filter: saturation, brightness, etc.

img {
    filter: brightness(1.3);
    contrast(30%);
}

responsive images
.responsive {
    grid-template-columns: 1fr;
}

@media screen and (max-widtH: 800px) {
    .responsive {
        grid-template-column: 1fr 1fr;
    }
}


LAYOUT  

flex-children: child element to a flex parent.
.flex {
    flex-basis: 200px;
    flex-grow: 1;
    flex-shrink: 1;
    flex: grow shrink basis;
}

grid-parents: outside of grid child.
.grid {
    grid-template-columns: 1fr 3fr;
    grid-template-rows: 100px;
    grid-gap: 1rem;
}

grid page layout: grid webpage layout
.webpage {
    grid-template-columns: 200px 1fr;
    grid-template-rows: 150px 40vh;

}


TRANSITIONS/TRANSFORMS/ANIMATIONS

dropshadow transition
transition {
    filter: drop-shadow(16px, 16px);
}

2d transforms - translate: moves objects, scale: resizes objects, skew: reshapes objects.
.translate-ex {
    transform: translateX(-200px);
    transform: translateY(200px);
    transform: translate(1, 3);
}

.scale-ex {
    transform: scale(2);
}

.skew-ex {
    transform: skew(25deg);
}

3d-transforms: use of the Z axis.

.3d {
    transform: scaleZ(2);
    transform: translateZ(100px);
}

3d-cards
.card {
    width: 200px;
    height: 200px;
}

.card-inner {
    position: relative;
}

.card-face {
    position: absolute;
    backface-visibility: hidden;
}

card-inner:hover {
    transform: rotateY(180deg);
}

carousels
.carousel-scene {
    position: relative;
    perspective: 1000px;
}

.carousel {
    position: absolute;
    transform-style: perserve-3d;
}

cell:nth-child(1) {
    transform: rotateY(72deg) translateZ(160px);
}

cell:nth-child(2) {
    transform: rotateY(144deg) translateZ(160px);
}

cell:nth-child(3) {
    transform: rotateY(216deg) translateZ(160px);
}

cell:nth-child(4) {
    transform: rotateY(288deg) translateZ(160px);
}


basic animation 

.animated {
    //example 
    @keyframes spin {
        from { 
            transform: rotateY(-260deg);
        }

        to {
            transform rotateY(500deg);
        } 
    }
}

.animated:hover {
    animation: spin 2s infinite, ease-in;
}

animation fill mode 

.fill {
    animation-fill-mode: forwards;
    animation-delay: 2s;
}



