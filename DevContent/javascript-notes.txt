------------ Data Types ------------ START
1. Boolean --> Checks if a value based on it's condition if it's true or false.
=== checks both the value and type of x against 0. It's the preferred way to ensure the condition is correctly evaluated.

Proper function declaration ->

Syntax:

  function checkValue() {
  let x = 0;
  if (x === 0) { //Using === (Strict Equality)
    return true;
  }
  return false;
}

console.log(checkValue()); // Output: true
  
  // Expected Output --> True

2. String --> sequence of characters enclosed within either 
single quotes ('), double quotes ("), or backticks (``).
  Syntax:
  let x = "string";

3. Number --> Any type of number, decimal, fraction, etc (1, 2.3, 1/2).
  Syntax:
  let x = 0;

------------ Data Types ------------ END

------------ Variables ------------ START

1. const - variable with a value that doesn't change.
  Example: 
  const x = 0;
  x = 1; 
  console.log(x);
  
  // this will cause an error because you can't change a const variable.

2. let - variable with a value that can change.
  Example:
  let x = 0;
  x = 1; 
  console.log(x);
  
  // Expected output --> 1

------------ Variables ------------ END

------------ JS Objects ------------ START

What is a JS Object? --> An object is a key that has a collection of properties that describes itself.

Syntax: 
const key = {
  property1: '';
  property2: 0;
  property3: false;
}

Example:
const person = {
  name: ‘John’;
  age: 20;
  job: student;
}

Example Explanation --> When you meet a person, you don't just call them 'person'. 
There are things about them, like their name, age, job, etc.

// You can input the object's properties into a string using the methods below:
1. Concatenation: the operation of combining elements together into a string. After a closing quote,
you input the variable in between a pair of plus signs, connecting it to the other part of the string.

Example:
  let sentence = “Hello, I’m “ + name + “. Nice to meet you.”;
  console.log(sentence);

2. Template literals: template literals are used to input information from objects into a string.
To do this, you must put the information into curly braces with a money sign going before the curly braces.
Instead of using quotes on the string, you must use backtick (`) characters.

Example:
  let sentence = `Hello, I’m ${name}. Nice to meet you.`;
  console.log(sentence);

Both of the above examples will log this string:
  “Hello, I’m John. Nice to meet you.”

------------ JS Objects ------------ END

------------ Functions ------------ START

In JavaScript, a function is a reusable block of code designed to perform a particular task. 
Functions allow you to structure your code, make it modular, and avoid repetition.

Defining a Function
There are several ways to define functions in JavaScript:

1. Function Declaration:
A traditional way to define a function. It can be called before its definition due to hoisting.

function greet(name) {
  return `Hello, ${name}!`;
}

console.log(greet('Alice')); // Output: Hello, Alice!

*************

2. Function Expression:
A function assigned to a variable. It is not hoisted, so it must be defined before being used.

const greet = function (name) {
  return `Hello, ${name}!`;
};

console.log(greet('Bob')); // Output: Hello, Bob!

*************
  
3. Arrow Function:
A concise way to write functions, introduced in ES6. It does not have its own this or arguments.

const greet = (name) => `Hello, ${name}!`;

console.log(greet('Charlie')); // Output: Hello, Charlie!

*************

4. Anonymous Function:
A function without a name. Often used as a callback.

setTimeout(function () {
  console.log('This is an anonymous function!');
}, 1000);

*************

5. IIFE (Immediately Invoked Function Expression):
A function that runs immediately after it is defined.

(function () {
  console.log('This function runs immediately!');
})();
Parameters and Arguments
Functions can take inputs (parameters) and return outputs. If a parameter is not provided, it is undefined by default.

function add(a, b = 0) {
  return a + b;
}

console.log(add(5, 10)); // Output: 15
console.log(add(5));     // Output: 5 (b defaults to 0)
Return Statement
The return statement specifies the value a function should return. If omitted, the function returns undefined.

function square(num) {
  return num * num;
}

console.log(square(4)); // Output: 16
Scope
Functions have their own local scope:

Variables defined inside a function are not accessible outside it.
Functions can access variables from the outer (global) scope.

const globalVar = 'Global';

function testScope() {
  const localVar = 'Local';
  console.log(globalVar); // Output: Global
  console.log(localVar);  // Output: Local
}

testScope();
console.log(localVar); // Error: localVar is not defined
Default Parameters
You can set default values for function parameters.

function greet(name = 'Guest') {
  return `Hello, ${name}!`;
}

console.log(greet()); // Output: Hello, Guest!
console.log(greet('Alice')); // Output: Hello, Alice!
Rest Parameters
Use ... to accept a variable number of arguments as an array.

function sum(...numbers) {
  return numbers.reduce((total, num) => total + num, 0);
}

console.log(sum(1, 2, 3, 4)); // Output: 10
Anonymous vs. Named Functions
Anonymous: A function without a name. Useful for callbacks.
Named: A function with a name, helpful for debugging.

const anonymous = function () {
  console.log('I am anonymous!');
};

function named() {
  console.log('I am named!');
}

*************

Callback Functions
A function passed as an argument to another function to be executed later.

function processUserInput(callback) {
  const name = 'Alice';
  callback(name);
}

processUserInput(function (name) {
  console.log(`Hello, ${name}!`);
});
// Output: Hello, Alice!

*************

Arrow Functions and this
Arrow functions do not bind their own this. Instead, they inherit this from the surrounding scope.

const person = {
  name: 'Bob',
  greet: function () {
    setTimeout(() => {
      console.log(`Hi, I’m ${this.name}`);
    }, 1000);
  },
};

person.greet(); // Output: Hi, I’m Bob
Summary
Functions in JavaScript are essential for:

Modularity: Breaking down code into smaller, reusable parts.
Encapsulation: Isolating logic in functions to improve clarity.
Flexibility: Handling inputs (parameters) and returning results.

------------ Functions ------------ END

---------- Date Methods -----------START

JavaScript's Date object provides methods to work with dates and times, allowing you to create, manipulate, and format dates.

Creating a Date Object

You can create a Date object using the new Date() constructor:

1. Current Date and Time:
Creates a Date object with the current date and time.

const now = new Date();
console.log(now);
// Output: Current date and time (e.g., Wed Nov 18 2024 15:00:00 GMT+0000)

2. Specific Date and Time:
Pass arguments to set a specific date and time:

const specificDate = new Date(2024, 10, 18, 15, 30, 0); // Months are 0-indexed
console.log(specificDate);
// Output: Mon Nov 18 2024 15:30:00 GMT+0000

Syntax: new Date(year, month, day, hours, minutes, seconds, milliseconds)
Year: Required.
Month: 0-indexed (January is 0, December is 11).
Other arguments are optional and default to 0.

3. Using a Timestamp:
Pass the number of milliseconds since January 1, 1970 (Unix epoch).

const timestampDate = new Date(1699900000000);
console.log(timestampDate);
// Output: Date corresponding to the timestamp

4. Using a Date String:
Parse a date string:

const stringDate = new Date("2024-11-18T15:30:00");
console.log(stringDate);
// Output: Mon Nov 18 2024 15:30:00 GMT+0000
--------------------------------

Common Methods
Getting Date Information
getFullYear() - Returns the year.

const year = now.getFullYear();
console.log(year); // Output: 2024
getMonth() - Returns the month (0-indexed).

const month = now.getMonth();
console.log(month); // Output: 10 (November)
getDate() - Returns the day of the month.

const day = now.getDate();
console.log(day); // Output: 18
getDay() - Returns the day of the week (0 = Sunday, 6 = Saturday).

const weekday = now.getDay();
console.log(weekday); // Output: 1 (Monday)
getHours(), getMinutes(), getSeconds(), getMilliseconds() - Return corresponding time components.

const hours = now.getHours();
console.log(hours); // Output: Current hour
getTime() - Returns the timestamp (milliseconds since the Unix epoch).

const timestamp = now.getTime();
console.log(timestamp); // Output: Current timestamp

---------- Date Methods -----------END

------------ String Methods ------------ START

The String below is an example string to demonstrate the following methods.
  let x = “Hi sir”;

x = x.toUpperCase(); 
  Explanation:
  converts every letter in a string to uppercase.
  Expected output -> “HI SIR”;

x = x.toLowerCase();
  Explanation:
  converts every letter in a string to lowercase.
  Expected output -> “hi sir”;

x = x.charAt(0); 
  Explanation:
  will grab a specific letter in a string. 
  In this instance, it will grab the letter at index.
  Expected output -> h

x = x.indexOf(x); 
  Explanation:
  Will count every character in a string besides spaces. 
  Expected output -> 4

x = x.substring(0, 2); 
  Explanation:
  will only print ‘hi’, the first value is the starting point while the second value is the end point.
  It will start at index 0, and grab each letter in the string until it reaches index 2.
  Expected output -> hi 

x = x.slice(2); 
  Explanation:
  this will extract a fraction of the string starting from index 0, and can be returned as a new string. 
  Expected output -> ir

x = x.trim();
  Explanation:
  This simply removes any extra space from a string.

x = x.replace(‘sir’, ‘John’); 
  Explanation:
  replaces one string with another string. 
  The first value will be the target and the second value is what you want to replace the target with.
  In this case, we are replacing ‘sir’ with ‘John’.
  Expected output -> Hi John

x = x.includes(‘hello’); 
  Explanation:
  This is checking if a specific part of a string is found within a string (case-sensitive).
  The method will return true or false depending if the string is found or not.
  In this case, x doesn’t include ‘hello’ so it will return false.
  Expected output -> false

------------ String Methods ------------ END

------------ Math Methods ------------ START

What are Math Methods? -> Static methods for calculating 
functions and cannot be used with the 'new' operator. 

Math.sqrt(9); 
Explanation:
  calculates the square root of 9, which is 3.
  Expected output -> 3

Math.abs(-1); 
Explanation:
  turns a number into an absolute value (1). Meaning it will return positive no matter what.
  Expected output -> 1

Math.round(3.3);
Explanation:
  returns to the nearest integer, which is 3 in this case.
  Expected output -> 3

Math.ceil(4.3); 
Explanation:
  rounds a number UP to the nearest integer. 
  Meaning in this case, it would return 5 instead of 4. 
  Expected output -> 5

Math.floor(3.9);
Explanation:
  rounds a number DOWN to the nearest integer.
  Meaning in this case, it would return 4 instead of 5.
  Expected output -> 4

Math.pow(2, 3); 
Explanation:
  This will calculate 2 to the power of 3, which is equal to 8. 
  The first number is the number that will be calculated and
  the second number is what power it is set to (2^3).
  2^3 is equal to 2 * 2 * 2.
  Expected output -> 8 

Math.random(); 
Explanation:
  By default, it generates a random number from 0 - 1. However, 
  the numbers it can generate can be modified.

EXAMPLE:

Math.floor(Math.random() * 10 + 1);
Explanation:
  generates a random number from 1 - 10, 
  the Math.floor method will make it so there are no random decimals.
  The ‘* 10’ is setting the limit, 
  meaning it can’t return anything that is greater than or equal to 10. 
  However, by adding the ‘+ 1’. We are setting the limit to 11. 
  Making it return a random number from 1-10.

------------ Math Methods ------------ END

------------ If Else ------------ START
1. Basic If Else: Executes code based on a condition, 
if the condition is true then the code inside of the 'if' block will run. 
Otherwise, it will run 'else' block instead.

Example:
  if(1 + 1 === 2) {
    return true;
  }

  else {
    return false;
  }

2. Nested If Statements: You can place an if statement inside of another if statement.

Example:
  if (1 + 1 === 2) { // first condition
    if (2 + 2 === 4) { // second condition
      return true;
    }
  }

  else {
    return false;
  }

Example Explanation --> If the first condition is true, then it will check if the second condition is true.
If the first condition is false, then it will move on to the 'else' block. 

3. Else if: If statements are executed from top to bottom. 
The first statement that is true, will execute. If the first if statement is false,
you can add an 'else if' to create a new condition. 

Example: 
  let x = 0;
  if (x === 1) { // condition is not true
    return true;
  }

  else if (x === 0) { // condition is true
    return true;
  }

Example Explanation --> Since the first if statement isn't true, it will move on to the 'else-if' statement that IS true.

4. Switch Statements: An alternative to if-statements. Executes code based on matching cases.

Syntax:
  switch (expression) {
    case value1:
      // code block 1;
      break; // cuts off the code so it doesn't form a loop.
    case value2:
      // code block 2;
      break;
    default:
       // default output, typically an error message;
  }

Example:
  let day = 5

  switch (day) {
    case 1:
      dayName = "Monday";
      break;
    case 2:
      dayName = "Tuesday";
      break;
    case 3:
      dayName = "Wednesday";
      break;
    case 4:
      dayName = "Thursday";
      break;
    case 5:
      dayName = "Friday";
      break;
    case 6:
      dayName = "Saturday";
      break;
    case 7:
      dayName = "Sunday";
      break;
    default:
      dayName = "Invalid day";
  }

console.log(dayName); 
// Expected output --> Friday

5. Ternary Operator: operator that takes three arguments as input and returns one output.

Syntax:
  const x = condition ? "if true" : "if false";

Example:
  let age = 20;

  const canVote = age >= 18 ? 'You can vote!' : 'You can't vote.';
  console.log(canVote);

  // Expected output --> You can vote!

6. Nested Ternary Operator: Like If Statements, you can nest ternary operators.

Example:
  let grade = 95;
  let results = (grade < 40) ? "Unsatisfactory" :
                (grade < 60) ? "Average" :
                (grade < 80) ? "Good" : "Excellent";
  console.log(results);

  // Expected output --> Excellent

Example Explanation: There are multiple conditions based on the grade you get. 
Anything less than 40 is Unsatisfactory, anything less than 60 is average, anything less than 80
is good, and anything greater than or equal to 80 is excellent.

------------ If Else ------------ END

------------ Loops ------------ START

1. for-loops: The for statement creates a loop with 3 optional expressions

Statement 1: It is the initialization of the counter. It is executed once before the execution of the code block.
Statement 2: It defines the condition for executing the code block
Statement 3: It is the increment or decrement of the counter & executed after the code block has been executed.

Syntax:
  for (statement 1; statement 2; statement 3) {
    // code
  }

Example: 
  for (let i = 1; i <= 10; i++) {
    console.log(i);
  }

// Expected output --> 1 2 3 4 5 6 7 8 9 10

2. Nested for-loops

Syntax:
  for (statement 1; statement 2; statement 3) { // condition 1
    for (statement 1; statement 2; statement 3) { // condition 2
      // code
    }
  }

  Example: 
    for (let i = 1; i <= 10; i++) {
      for (let j = 1; j <= 10; j++) {
        console.log(`${i} x ${j} = ${i * j}`);
      }
    }

  Example Explanation:
    Outer loop: The outer loop, controlled by i, iterates from 1 to 10.

    Inner loop: For each iteration of the outer loop, the inner loop, controlled by j,
    also iterates from 1 to 10.

    Expected Output --> (will display a multiplication table going all the way to multiples of 10).


------------ Loops ------------ END
